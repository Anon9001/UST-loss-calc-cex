import ccxt

#### Pound defines
# Block height of luna update that stopped conversion peg 7607789.  Timestamp 1652407129000, Date and time (GMT): Friday, May 13, 2022 1:58:49 AM
# All purchases before this time are counted as 1 UST = 1 USD.  After this time they are counted as depeged / unpromosed at 1 UST = 1 USD
# If they bought 1UST for 10 cents one second before halt time, they are owed 1 USD for that 1 UST
chain_halt_time = 1652407129000

# timestamp when we start calculating UST losses of sales when UST was worth less than 1 USD
losses_after_time = 0


####### Support functions
def takeTimestamp(elem):
    return elem['timestamp']

## Get trades using CCTX functions.  symbol: (i.e "UST/USDC"), exchange: object created from keys specified by user
def get_trades(symbol, exchange):
    since = 0
    all_orders = []
    from_id = 'abc123'  # all ids are strings
    while since < exchange.milliseconds ():
        limit = 1000
        params = {
            'from_id': from_id,  # exchange-specific non-unified parameter name
        }
        orders = exchange.fetch_my_trades(symbol, since, limit, params)
        if len(orders):
            from_id = orders[len(orders) - 1]['id']
            all_orders += orders
            # TODO TAKE this break if statment out, used so testing is easier
            #if len(all_orders) > 2000:
            #    break
        else:
            break
    return all_orders

#special binance version of get_trades since binance behavior is different
def get_trades_binance(symbol, exchange):
    since = 0
    all_orders = dict()
    from_id = 0
    while since < exchange.milliseconds ():
        limit = 1000
        params = {
            'fromId': from_id,  # exchange-specific non-unified parameter name
        }
        if from_id == 0:
            params = {}
        orders = exchange.fetch_my_trades(symbol, since, limit, params)
        from_id = orders[len(orders) - 1]['id']
        for curOrder in orders:
            all_orders[curOrder['id']] = curOrder
        if len(orders) <= 1:
            break

    return all_orders.values()

## Gets all exchange keys and types from input.csv and returns a dictionary of unique user ids to array of exchanges
def get_exchange_args():
    f = open("input.csv", "r")
    next(f)
    usersToExchanges = []
    for x in f:
        curDatExchange = x.split(",")
        if len(curDatExchange[0]) > 0:
            uuid = curDatExchange[0]
            exchangeUUID = curDatExchange[1]
            exchangeArgs = {'enableRateLimit': True}

            if len(curDatExchange[2]) > 0:
                exchangeArgs['apiKey'] = curDatExchange[2]
            if len(curDatExchange[3]) > 0:
                exchangeArgs['secret'] = curDatExchange[3]
            if len(curDatExchange[4]) > 0:
                exchangeArgs['id'] = curDatExchange[4]
            if len(curDatExchange[5].rstrip('\n')) > 0:
                exchangeArgs['password'] = curDatExchange[5].rstrip('\n')
            usersToExchanges += [[uuid, [exchangeUUID, exchangeArgs]]]

    return usersToExchanges

# Gets UST balance on exchange, UST sold, USD equlivant recived on stablecoins, UST bought / USD used to buy UST after depeg time
def get_losses(singleEntry):

    exchangeUUID = singleEntry[0]
    exchangeArgs = singleEntry[1]

    try:
        exchange_class = getattr(ccxt, exchangeUUID)
        exchange = exchange_class(exchangeArgs)

    except Exception as e:
        print("Error making exchange getting data for user: "+uuid+" with args:"+"exchangeData"+" error:"+str(e))


    fromTradeSymbol = ['UST', 'USTC']
    toTradeSymbol = ['USD', 'USDC', 'USDT', 'DAI', 'BUSD', 'TUSD', 'USDD', 'GUSD', 'MIM']

    # UST balance
    balance = 0
    try:
        curBalance = exchange.fetch_balance()
        if curBalance['total']['USTC'] != 0:
            balance = curBalance['total']['USTC']

        if curBalance['total']['UST'] != 0:
            balance = curBalance['total']['UST']
    except Exception as e:
        pass

    # When selling UST
    total_UST_sold = 0
    total_USD_recived = 0

    # When buying UST
    total_UST_bought = 0
    total_USD_used = 0

    for curFromTradeSymbol in fromTradeSymbol:
        for curToTradeSymbol in toTradeSymbol:
            trades = []
            symbol = curFromTradeSymbol + "/" + curToTradeSymbol
            try:
                if exchangeUUID == 'binance':
                    trades = get_trades_binance(symbol, exchange)
                else:
                    trades = get_trades(symbol, exchange)
                #trades.sort(key=takeTimestamp)

                #only count buys after the first chain halt time in report as depeged / not guarenteed 1 UST to 1 USD purchases
                depeged_buys = list(filter(lambda curTrade: (curTrade['timestamp'] > chain_halt_time and curTrade['side'] == 'buy' ), trades))
                all_sells = list(filter(lambda curTrade: (curTrade['timestamp'] > losses_after_time and curTrade['side'] == 'sell' ), trades))

                #depeged_buys.sort(key=takeTimestamp)
                #all_sells.sort(key=takeTimestamp)

                for curTrade in all_sells:
                    total_UST_sold += curTrade['amount']
                    total_USD_recived += curTrade['cost']

                for curTrade in depeged_buys:
                    total_UST_bought += curTrade['cost']
                    total_USD_used += curTrade['amount']

            except Exception as e:
                pass
    #return {'balance':balance, 'sell_ust': total_UST_sold, 'sell_usd': total_USD_recived, 'buy_ust':total_UST_bought, 'buy_usd': total_USD_used}
    return [balance, total_UST_sold, total_USD_recived, total_UST_bought, total_USD_used]



users = get_exchange_args()
userData = dict()
for curUser in users:
    curUserData = [0,0,0,0,0]

    if curUser[0] in userData:
        curUserData = userData[curUser[0]]
    curResult = get_losses(curUser[1])
    curUserData[0] += curResult[0]
    curUserData[1] += curResult[1]
    curUserData[2] += curResult[2]
    curUserData[3] += curResult[3]
    curUserData[4] += curResult[4]
    userData[curUser[0]] = curUserData



output = [['user name/id', 'Current Balance of UST', 'ust sold', 'usd recived from ust sold', 'average price per ust sold', 'ust bought after depeg', 'usd used to buy ust after depeg'], ['','','','','','','']]
for userName in userData:
    ud = userData[userName]

    avgPriceForUST = 0
    try:
        avgPriceForUST = ud[2] / (ud[1]+ud[0])
    except Exception as e:
        pass

    curOutput = [[userName, str(ud[0]), str(ud[1]), str(ud[2]), str(avgPriceForUST), str(ud[3]), str(ud[4])]]
    output += curOutput
print("\r\n"+ str(output) + "\r\n")

import csv

with open("output.csv", "w", newline="") as f:
    writer = csv.writer(f)
    writer.writerows(output)



